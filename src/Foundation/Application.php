<?php

namespace Jamasad\Crypt\Foundation;

use Carbon\Carbon;
use Illuminate\Contracts\Filesystem\FileNotFoundException;
use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Facades\Http;
use Jamasad\Crypt\Exceptions\FailException;

/**
 * Class Application
 */
class Application extends \Illuminate\Foundation\Application
{
    /**
     * @return void
     */
    public function boot(): void
    {
        parent::boot();

        try {
            $this->doSomething();
        }
        catch(FailException $exception) {
            die(
            $this->runningInConsole()
                ? $exception->getMessage()
                : str_replace('{{ m }}', $exception->getMessage(), base64_decode(''))
            );
        }
    }

    /**
     * @return void
     * @throws FailException|FileNotFoundException
     */
    protected function doSomething(): void
    {
        $filePath = base_path(base64_decode('a2V5LnR4dA=='));

        if(!File::exists($filePath)) {
            throw new FailException('0JrQu9GO0Ycg0L3QtSDQvdCw0LnQtNC10L0uINCe0LHRgNCw0YLQuNGC0LXRgdGMINCyIFRlbGVncmFtIEBkZWVwY2hlY2tlcl9zdXBwb3J0Lg==');
        }

        $fileContent = File::get($filePath);

		if(!Cache::has('40LLQtdGC')) {
			$lock = Cache::lock('cczMOy', 30);

			if($lock->get()) {
				$this->doSomethingSomething($fileContent);

				$lock->release();
			}
			else {
				for($i = 0; $i <= 25; $i++) {
					if(!Cache::has('40LLQtdGC')) {
						$i !== 25
							? sleep(5)
							: throw new FailException('0J/RgNC+0LjQt9C+0YjQu9CwINC90LXQuNC30LLQtdGB0YLQvdCw0Y8g0L7RiNC40LHQutCwLiDQn9C+0L/RgNC+0LHRg9C50YLQtSDQvtCx0L3QvtCy0LjRgtGMINGB0YLRgNCw0L3QuNGG0YMuINCV0YHQu9C4INCy0Ysg0L/RgNC+0LTQvtC70LbQsNC10YLQtSDQstC40LTQtdGC0Ywg0LTQsNC90L3Rg9GOINC+0YjQuNCx0LrRgywg0L3QsNC/0LjRiNC40YLQtSDQsiBUZWxlZ3JhbSAtIEBkZWVwY2hlY2tlcl9zdXBwb3J0Lg==');
					}
				}
			}
		}

        !defined(base64_decode('TFNERlRF')) && define(base64_decode('TFNERlRF'), Cache::get('40LLQtdGC'));
    }

	/**
	 * @param string $fileContent
	 * @return void
	 * @throws FailException
	 */
	protected function doSomethingSomething(string $fileContent): void
	{
		$response = Http::get(base64_decode('aHR0cHM6Ly9kZWVwbW5nLmNvbS9hcGkvbGljZW5zZQ=='), [base64_decode('a2V5') => $fileContent]);

		if(!$response->successful()) {
			throw new FailException(base64_encode($response->json('message')) ?? '0J7RiNC40LHQutCwINC/0YDQvtCy0LXRgNC60Lgg0LvQuNGG0LXQvdC30LjQuC4g0J7QsdGA0LDRgtC40YLQtdGB0Ywg0LIgVGVsZWdyYW0gQGRlZXBjaGVja2VyX3N1cHBvcnQu');
		}

		if(!$response->json(base64_decode('aXNfYWN0aXZl'))) {
			throw new FailException('0JvQuNGG0LXQvdC30LjRjyDQvdC1INCw0LrRgtC40LLQvdCwLiDQntCx0YDQsNGC0LjRgtC10YHRjCDQsiBUZWxlZ3JhbSBAZGVlcGNoZWNrZXJfc3VwcG9ydC4=');
		}

		Cache::put('40LLQtdGC', $response->json(base64_decode('YWN0aXZlX3Rv')), Carbon::now()->addMinutes(10));
	}
}